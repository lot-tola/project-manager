// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Boards.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (id, board_title)
VALUES ($1, $2) RETURNING id, board_title, created_at, updated_at
`

type CreateBoardParams struct {
	ID         uuid.UUID
	BoardTitle string
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, arg.ID, arg.BoardTitle)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.BoardTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards WHERE id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBoard, id)
	return err
}

const getBoards = `-- name: GetBoards :many
SELECT id, board_title, created_at, updated_at FROM boards
`

func (q *Queries) GetBoards(ctx context.Context) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, getBoards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.BoardTitle,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneBoard = `-- name: GetOneBoard :one
SELECT id, board_title, created_at, updated_at FROM boards WHERE id=$1
`

func (q *Queries) GetOneBoard(ctx context.Context, id uuid.UUID) (Board, error) {
	row := q.db.QueryRowContext(ctx, getOneBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.BoardTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards SET board_title = $1, updated_at = $2 WHERE id = $3 RETURNING id, board_title, created_at, updated_at
`

type UpdateBoardParams struct {
	BoardTitle string
	UpdatedAt  time.Time
	ID         uuid.UUID
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, updateBoard, arg.BoardTitle, arg.UpdatedAt, arg.ID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.BoardTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
