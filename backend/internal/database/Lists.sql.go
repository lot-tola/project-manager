// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Lists.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (id, created_at, updated_at, board_id, list_title)
VALUES ($1, $2, $3, $4, $5) RETURNING id, board_id, list_title, created_at, updated_at
`

type CreateListParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	BoardID   uuid.UUID
	ListTitle string
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BoardID,
		arg.ListTitle,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.ListTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const getAllLists = `-- name: GetAllLists :many
SELECT id, board_id, list_title, created_at, updated_at FROM lists
`

func (q *Queries) GetAllLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getAllLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.BoardID,
			&i.ListTitle,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLists = `-- name: GetLists :many
SELECT 
    l.id   AS list_id,
    l.list_title,
    t.id   AS task_id,
    t.task_title,
    t.description,
    t.due_date,
    t.assigned_to,
	t.status,
    t.labels
FROM lists l
LEFT JOIN tasks t ON t.list_id = l.id
WHERE l.board_id = $1
`

type GetListsRow struct {
	ListID      uuid.UUID
	ListTitle   string
	TaskID      uuid.NullUUID
	TaskTitle   sql.NullString
	Description sql.NullString
	DueDate     sql.NullTime
	AssignedTo  sql.NullString
	Status      sql.NullString
	Labels      []string
}

func (q *Queries) GetLists(ctx context.Context, boardID uuid.UUID) ([]GetListsRow, error) {
	rows, err := q.db.QueryContext(ctx, getLists, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsRow
	for rows.Next() {
		var i GetListsRow
		if err := rows.Scan(
			&i.ListID,
			&i.ListTitle,
			&i.TaskID,
			&i.TaskTitle,
			&i.Description,
			&i.DueDate,
			&i.AssignedTo,
			&i.Status,
			pq.Array(&i.Labels),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE lists SET list_title = $1, updated_at = $2 WHERE id = $3 RETURNING id, board_id, list_title, created_at, updated_at
`

type UpdateListParams struct {
	ListTitle string
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList, arg.ListTitle, arg.UpdatedAt, arg.ID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.ListTitle,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
